// 처음 풀었던 방식
const solution1 = n => {
    const res = [];
    let idx = 0;

    for(let i = 2; i <= n; i++) {
        while (!(n % i)) {
            n /= i;
            res[idx++] = i;
        }
    }

    return [...new Set(res)];
}

// 테스트 1 〉	통과 (0.04ms, 33.5MB)
// 테스트 2 〉	통과 (0.04ms, 33.4MB)
// 테스트 3 〉	통과 (0.12ms, 33.5MB)
// 테스트 4 〉	통과 (0.04ms, 33.4MB)
// 테스트 5 〉	통과 (0.16ms, 33.5MB)
// 테스트 6 〉	통과 (0.13ms, 33.5MB)
// 테스트 7 〉	통과 (0.04ms, 33.5MB)
// 테스트 8 〉	통과 (0.12ms, 33.4MB)
// 테스트 9 〉	통과 (0.24ms, 33.4MB)
// 테스트 10 〉	통과 (0.05ms, 33.6MB)
// 테스트 11 〉	통과 (0.04ms, 33.6MB)
// 테스트 12 〉	통과 (0.04ms, 33.5MB)
// 테스트 13 〉	통과 (0.13ms, 33.4MB)
// 테스트 14 〉	통과 (0.19ms, 33.5MB)
// 테스트 15 〉	통과 (0.13ms, 33.5MB)
// 테스트 16 〉	통과 (0.04ms, 33.5MB)
// 테스트 17 〉	통과 (0.05ms, 33.4MB)
// 테스트 18 〉	통과 (0.04ms, 33.5MB)
// 테스트 19 〉	통과 (0.04ms, 33.5MB)
// 테스트 20 〉	통과 (0.04ms, 33.5MB)
// 테스트 21 〉	통과 (0.04ms, 33.5MB)
// 테스트 22 〉	통과 (0.06ms, 33.4MB)
// 테스트 23 〉	통과 (0.04ms, 33.5MB)
// 테스트 24 〉	통과 (0.04ms, 33.6MB)


// '다른 사람의 풀이' 중 괜찮은 방식
const solution2 = n => {
    const res = [];
    let idx = 0;
    let i = 2;

    while (i <= n) {
      if (!(n % i)) {
        res[idx++] = i;
        n /= i;
      } else {
        i++;
      }
    }

    return [...new Set(res)];
}

// 테스트 1 〉	통과 (0.04ms, 33.4MB)
// 테스트 2 〉	통과 (0.04ms, 33.4MB)
// 테스트 3 〉	통과 (0.11ms, 33.4MB)
// 테스트 4 〉	통과 (0.04ms, 33.4MB)
// 테스트 5 〉	통과 (0.15ms, 33.5MB)
// 테스트 6 〉	통과 (0.13ms, 33MB)
// 테스트 7 〉	통과 (0.04ms, 33MB)
// 테스트 8 〉	통과 (0.11ms, 33.4MB)
// 테스트 9 〉	통과 (0.24ms, 33.4MB)
// 테스트 10 〉	통과 (0.04ms, 33.2MB)
// 테스트 11 〉	통과 (0.04ms, 33.4MB)
// 테스트 12 〉	통과 (0.04ms, 33.5MB)
// 테스트 13 〉	통과 (0.13ms, 33.4MB)
// 테스트 14 〉	통과 (0.18ms, 33.4MB)
// 테스트 15 〉	통과 (0.12ms, 33.3MB)
// 테스트 16 〉	통과 (0.11ms, 33.4MB)
// 테스트 17 〉	통과 (0.04ms, 33.4MB)
// 테스트 18 〉	통과 (0.04ms, 33.5MB)
// 테스트 19 〉	통과 (0.04ms, 33.5MB)
// 테스트 20 〉	통과 (0.05ms, 33.4MB)
// 테스트 21 〉	통과 (0.04ms, 33.2MB)
// 테스트 22 〉	통과 (0.04ms, 33.4MB)
// 테스트 23 〉	통과 (0.04ms, 33.5MB)
// 테스트 24 〉	통과 (0.04ms, 33.4MB)


// 제곱근을 이용한 방식
const solution3 = n => {
    const res = new Set();
    const sqrtNum = ~~Math.sqrt(n);

    for(let i = 2; i <= sqrtNum; i++) {
        while(!(n % i)) {
            res.add(i);
            n /= i;
        }
    }

    if(n >= 2) res.add(n);

    return [...res];
}

// 테스트 1 〉	통과 (0.12ms, 33.5MB)
// 테스트 2 〉	통과 (0.04ms, 33.5MB)
// 테스트 3 〉	통과 (0.04ms, 33.4MB)
// 테스트 4 〉	통과 (0.04ms, 33.4MB)
// 테스트 5 〉	통과 (0.13ms, 33.3MB)
// 테스트 6 〉	통과 (0.11ms, 33.5MB)
// 테스트 7 〉	통과 (0.04ms, 33.5MB)
// 테스트 8 〉	통과 (0.04ms, 33.4MB)
// 테스트 9 〉	통과 (0.15ms, 33.4MB)
// 테스트 10 〉	통과 (0.12ms, 33.5MB)
// 테스트 11 〉	통과 (0.16ms, 33.4MB)
// 테스트 12 〉	통과 (0.12ms, 33.4MB)
// 테스트 13 〉	통과 (0.12ms, 33.3MB)
// 테스트 14 〉	통과 (0.12ms, 33.4MB)
// 테스트 15 〉	통과 (0.12ms, 33.5MB)
// 테스트 16 〉	통과 (0.16ms, 33.5MB)
// 테스트 17 〉	통과 (0.04ms, 33.4MB)
// 테스트 18 〉	통과 (0.04ms, 33.5MB)
// 테스트 19 〉	통과 (0.05ms, 33.3MB)
// 테스트 20 〉	통과 (0.04ms, 33.5MB)
// 테스트 21 〉	통과 (0.05ms, 33.5MB)
// 테스트 22 〉	통과 (0.04ms, 33.5MB)
// 테스트 23 〉	통과 (0.06ms, 33.5MB)
// 테스트 24 〉	통과 (0.11ms, 33.4MB)